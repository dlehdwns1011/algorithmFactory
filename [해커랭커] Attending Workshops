#include<bits/stdc++.h>

using namespace std;

//Define the structs Workshops and Available_Workshops.
//Implement the functions initialize and CalculateMaxWorkshops
struct Workshop{
    int startTime;
    int duration;
    int endTime;

    void setInfo(int s, int d, int e){
        startTime = s;
        duration = d;
        endTime = e;
    }
};

struct Available_Workshops{
    int n;
    vector<Workshop> works;
    Available_Workshops(int n){
        works.resize(n);
    }
};

Available_Workshops* initialize(int* start_time, int* duration, int n){
    Available_Workshops* pAW = new Available_Workshops(n);
    for(int i = 0 ; i < n ; ++i){
        pAW->works[i].setInfo(start_time[i], duration[i], 
        start_time[i] + duration[i]);
    }
    
    return pAW;
}

bool compare(Workshop& a, Workshop& b){
    return (a.endTime) < (b.endTime);
}

int CalculateMaxWorkshops(Available_Workshops* ptr){
    sort(ptr->works.begin(), ptr->works.end(), compare);
    int result = 0;
    int nowTime = 0;
    for(auto workshop : ptr->works){
        if(workshop.startTime >= nowTime){
            nowTime = workshop.endTime;
            ++result;
        }
    }
    
    return result;
}

int main(int argc, char *argv[]) {
    int n; // number of workshops
    cin >> n;
    // create arrays of unknown size n
    int* start_time = new int[n];
    int* duration = new int[n];

    for(int i=0; i < n; i++){
        cin >> start_time[i];
    }
    for(int i = 0; i < n; i++){
        cin >> duration[i];
    }

    Available_Workshops * ptr;
    ptr = initialize(start_time,duration, n);
    cout << CalculateMaxWorkshops(ptr) << endl;
    return 0;
}
